<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[微信小游戏目录结构]]></title>
    <url>%2F2018%2F01%2F14%2Fwechat_game%2Fdir-structure-md%2F</url>
    <content type="text"><![CDATA[本文主要讲述， 如何快速创建一个小游戏项目并且针对其目录结构进行简单讲解。 1. 创建项目首先新建项目，目前小游戏不提供公开注册，可点击体验小游戏使用无 AppID 模式（创建时如果建立快速启动模板，需要选择一个空的目录）。 2. 微信预览选择建立快速启动模板后，将会生成一个小游戏项目，并在开发工具中打开，这时点击开发工具右上角的预览按钮，会生成对应二维码，微信扫码即可。 3. 目录结构./audio: 音频目录文件 ./images: 图片文件目录 ./js: 主要源代码目录 ./game.js: 主入口文件 ./game.json: 配置文件 12345678910111213141516171819./js├── base // 定义游戏开发基础类│ ├── animatoin.js // 帧动画的简易实现│ ├── pool.js // 对象池的简易实现│ └── sprite.js // 游戏基本元素精灵类├── libs│ ├── symbol.js // ES6 Symbol简易兼容│ └── weapp-adapter.js // 小游戏适配器├── npc│ └── enemy.js // 敌机类├── player│ ├── bullet.js // 子弹类│ └── index.js // 玩家类├── runtime│ ├── background.js // 背景类│ ├── gameinfo.js // 用于展示分数和结算界面│ └── music.js // 全局音效管理器├── databus.js // 管控游戏状态└── main.js // 游戏入口主函数 源码分析：参考 segmentfault的一篇文章]]></content>
      <categories>
        <category>wechat</category>
      </categories>
      <tags>
        <tag>wechat_game</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序开发工具 linux 运行]]></title>
    <url>%2F2018%2F01%2F14%2Fwechat_game%2Fprepare%2F</url>
    <content type="text"><![CDATA[首先，微信小程序开发工具是用nw.js实现的，nw.js(直接从DOM中调用所有的Node.js模块)本身是跨平台的，但是微信只出了开发工具的windows和mac版。下面介绍 linux 系统如何运行开发工具， 以 ubuntu 为例。 1.nw下载nwjs sdk（需要devtool的支援） 压缩包之后解压; 2.设置 path 变量；123$ vim ~/.bashrc # 视个人情况选择文件# 加入步骤一中解压目录， # 例如： export PATH=&quot;$PATH:/home/kk/Downloads/nwjs-sdk-v0.27.4-linux-x64&quot; 3.package.nw在 windows 机器安装开发工具， 找到安装目录，将 package.nw 文件夹拷入 ubuntu 系统； 4.运行12$ cd package.nw$ nw .]]></content>
      <categories>
        <category>wechat</category>
      </categories>
      <tags>
        <tag>wechat_game</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-next]]></title>
    <url>%2F2017%2F12%2F23%2Fhexo-next%2F</url>
    <content type="text"><![CDATA[使用 hexo - next 搭建 github pages 注意事项next version： 5.1.3 文件内容只是一些比较碎的注意事项， 详细流程请参照： next 官网 1. 更换 next 主题123$ hexo init site_name # 创建你的 hexo 项目目录$ cd site_name$ git clone https://github.com/iissnan/hexo-theme-next themes/next # 下载主题 此时，项目目录下有两个 _config.yml 配置文件： ./_config.yml # 站点配置文件 ./themes/next/_config.yml # 主题配置文件然后修改站点配置文件 theme: next 即可 2. 部署项目至 your_user_name.github.io首先， 在 github 创建名为 your_user_name.github.io 的项目然后， 在 站点配置文件 加入或配置 1234deploy: type: git branch: master repo: https://github.com/your_user_name/your_user_name.github.io.git 最后， 开始将 hexo 项目推至 github pages 123$ hexo clean$ hexo generate$ hexo deploy 3. 域名配置两种方案： 方案一： 在 your_user_name.github.io 项目中点击 setting, 配置 custom domain （缺点： 每次 deploy 需要重新配置）方案二： 在 hexo 项目 source 目录下， 创建 CNAME 文件存储域名 4. 静态文件存放由于每次 deploy 都会生成新的 ./.deploy 文件夹并推送至远端，所以类似 images、CNAME、README 文件都要放在 source 文件夹下， 否则将不会推送至远端。 5. 文件内容头说明在每篇文章的头部都会有说明信息供解析， 不多说， 看示例123456---title: Hello Worlddate: 2017-12-16categories: testtags: [test]--- 6. 首页 read more 设置在 *.md 文件中加入 &lt;!-- more --&gt;， 自由控制显示内容， 其他方式不做推荐，不做介绍 7. 语言设置语言设置最好设置固定语言（个人推荐）， 实测如果不设置，可能会出现乱七八槽的语言；站点配置文件1language: en 8. gitment首先， 在 github developer setting Register a new OAuth application123application name # 随意Homepage URL # https://your_user_name.github.io || custom domainAuthorization callback URL # https://your_user_name.github.io || custom domain 其中， 两个 URL 视需求而定， 暂不支持多URL；创建后会生成 client_id、client_secret 供使用 然后， 创建 一个项目 gitment-comments ， 项目名随意， 下面配置会用到，用来存储回复内容；最后， 在 主题配置文件中配置：12345678910111213gitment: enable: true mint: true count: true lazy: false cleanly: false language: # Force language, or auto switch by theme github_user: # your user name github_repo: gitment-comments # 存储回复内容的项目名称 client_id: # client_id client_secret: # client_secet proxy_gateway: # Address of api proxy, See: https://github.com/aimingoo/intersect redirect_protocol: # Protocol of redirect_uri with force_redirect_protocol when mint enabled 9. 搜索功能推荐本文章推荐使用 local search 1$ npm install hexo-generator-searchdb --save # 安装插件 站点配置文件（不做解释）：12345search: path: search.xml field: post format: html limit: 10000 主题配置文件：1234567local_search: enable: true # if auto, trigger search by changing input # if manual, trigger search by pressing enter key or search button trigger: auto # show top n results per article, show all results by setting to -1 top_n_per_article: 1]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Scrapy-入门教程]]></title>
    <url>%2F2017%2F12%2F23%2Fweb-spider%2Fscrapy-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架。 可以应用在包括数据挖掘，信息处理或存储历史数据等一系列的程序中。本系列所有文档均已基于 linux 操作系统 1. 安装1$ pip install Scrapy]]></content>
      <categories>
        <category>scrapy</category>
      </categories>
      <tags>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F12%2F16%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
</search>
