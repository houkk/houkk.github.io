(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{361:function(t,l,a){"use strict";a.r(l);var s=a(25),e=Object(s.a)({},(function(){var t=this,l=t.$createElement,a=t._self._c||l;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("connector 作为 slave 连接 mysql, 接收 行级 binary log, 实现数据变更事件通知")])]),t._v(" "),a("blockquote",[a("p",[t._v("connector 工作流程如下")])]),t._v(" "),a("ul",[a("li",[a("ol",[a("li",[t._v("snapshot record (初始化)")])]),t._v(" "),a("ul",[a("li",[t._v("对数据库 加全局只读锁 做快照读, 对需要监控的数据库 schema 和 数据做同步")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("binlog record")])])])]),t._v(" "),a("h2",{attrs:{id:"_1-mysql-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-mysql-配置"}},[t._v("#")]),t._v(" 1. Mysql 配置")]),t._v(" "),a("ul",[a("li",[t._v("binlog_format\n"),a("ul",[a("li",[a("code",[t._v("row level")]),t._v(": show variables like 'binlog_format';")])])]),t._v(" "),a("li",[t._v("version\n"),a("ul",[a("li",[a("code",[t._v("5.6 or later")]),t._v(": select version()")])])]),t._v(" "),a("li",[t._v("GTID 可选")]),t._v(" "),a("li",[t._v("创建特定用户\n"),a("ul",[a("li",[t._v("权限: GRANT SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT, LOCK TABLES ON "),a("em",[t._v(".")]),t._v(" TO 'debezium' IDENTIFIED BY 'dbz';")]),t._v(" "),a("li",[t._v("select: 查找行; "),a("code",[t._v("仅 snapshot 需要")])]),t._v(" "),a("li",[t._v("reload: flush 命令需要; "),a("code",[t._v("仅 snapshot 需要")])]),t._v(" "),a("li",[t._v("show databases: 获取所有 database 名称; "),a("code",[t._v("仅 snapshot 需要")])]),t._v(" "),a("li",[t._v("replication slave: connect and read binlog; "),a("code",[t._v("总是需要")])]),t._v(" "),a("li",[t._v("replication client: SHOW MASTER STATUS, SHOW SLAVE STATUS, and SHOW BINARY LOGS; "),a("code",[t._v("总是需要")])]),t._v(" "),a("li",[t._v("LOCK TABLES: 表级锁; "),a("code",[t._v("仅 aws 需要且加锁时需要")])])])]),t._v(" "),a("li",[t._v("mysql 不同架构\n"),a("ul",[a("li",[t._v("单机: 没问题")]),t._v(" "),a("li",[t._v("主从复制: connector 连接一台实例, 并且一直连接这台实例; 不同实例的 binlog 位置记录不同, 所以不可能切换实例")])])]),t._v(" "),a("li",[t._v("mysql 数据库名，表名: ([a-z,A-Z,0-9,_])")])]),t._v(" "),a("h2",{attrs:{id:"_2-connector-参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-connector-参数"}},[t._v("#")]),t._v(" 2. connector 参数")]),t._v(" "),a("ul",[a("li",[t._v("name: 唯一名称")]),t._v(" "),a("li",[t._v("connector.class: 连接器的 java class, 如果 connect 中没有内置该连接器, 需要另行下载、安装该插件")]),t._v(" "),a("li",[t._v("tasks.max: 默认为 1, mysql 不能改")]),t._v(" "),a("li",[t._v("database.hostname: ..")]),t._v(" "),a("li",[t._v("database.port: ..")]),t._v(" "),a("li",[t._v("database.user: 前面提到的"),a("code",[t._v("特定用户")])]),t._v(" "),a("li",[t._v("database.password: ..")]),t._v(" "),a("li",[t._v("database.whitelist: 逗号分隔白名单, 和 blacklist 无法共存")]),t._v(" "),a("li",[t._v("database.blacklist: 逗号分隔黑名单, 和 whitelist 无法共存")]),t._v(" "),a("li",[t._v("table.whitelist: .., 和 blacklist 无法共存")]),t._v(" "),a("li",[t._v("table.blacklist: .., 和 whitelist 无法共存")]),t._v(" "),a("li",[t._v("database.server.name:\n"),a("ul",[a("li",[t._v("字母或下划线开头")]),t._v(" "),a("li",[t._v("mysql 集群中的唯一服务名;")]),t._v(" "),a("li",[t._v("作为数据存储的 kafka topic 的前缀 (${server.name}.${db_name}.${table_name})")])])]),t._v(" "),a("li",[t._v("database.server.id:\n"),a("ul",[a("li",[t._v("mysql 集群中唯一服务 id")]),t._v(" "),a("li",[t._v("作为 slave 同步 mysql binary log, 所以和其他 mysql slave 也要区分")])])]),t._v(" "),a("li",[t._v("database.history.kafka.bootstrap.servers: kafka 地址 (逗号分隔)")]),t._v(" "),a("li",[t._v("database.history.kafka.topic: mysql schema 变更记录 topic\n"),a("ul",[a("li",[t._v("目前为永不删除")])])]),t._v(" "),a("li",[t._v("database.history.store.only.monitored.tables.ddl: true or false\n"),a("ul",[a("li",[t._v("是否监控其余表的 schema 变化并存储")]),t._v(" "),a("li",[t._v("阿里云 rds 有本身的健康嗅探表, 会不停的生成 ddl 语句, 由于 "),a("code",[t._v("history topic")]),t._v(" 不会删除, 会导致数据累积。\n"),a("ul",[a("li",[t._v("mysql.ha_health_check")]),t._v(" "),a("li",[t._v("任务重启时, 会将 schema 拉到本地, 做数据处理.")]),t._v(" "),a("li",[t._v("如果不停累积, 将会影响拉取以及处理的耗时, 导致其他一系列乱七八糟的问题")])])]),t._v(" "),a("li",[t._v("所以, 建议设置为 true, 只监控 table.whitelist 中 schema 变更")])])]),t._v(" "),a("li",[t._v("snapshot.mode: snapshot 类型\n"),a("ul",[a("li",[t._v("默认(initial)会将数据库 schema 和 所有数据生成 create 事件, 传入 kafka;")]),t._v(" "),a("li",[t._v("我们选择 schema_only(只同步 schema)")])])]),t._v(" "),a("li",[t._v("snapshot.locking.mode\n"),a("ul",[a("li",[t._v("是否持有全局读锁")]),t._v(" "),a("li",[t._v("innotdb 下, 全局锁和一致性读都可以用来备份, 而源码中两者重合了, 所以该选项可以设为 none")])])]),t._v(" "),a("li",[t._v("snapshot.new.tables: parallel\n"),a("ul",[a("li",[t._v("使得更改 table.whitlist 操作生效")]),t._v(" "),a("li",[t._v("貌似是 "),a("code",[t._v("beta")]),t._v(" 参数, 温柔修改白\\黑名单, 不然会绝望的")])])]),t._v(" "),a("li",[t._v("decimal.handling.mode: string\n"),a("ul",[a("li",[t._v("decimal/numberic 默认转为 bytes, 暂处理为 string, 更易读、处理")])])]),t._v(" "),a("li",[t._v("gtid.new.channel.position: (new channel 即 GTID 前缀发生变化, 主要发生在 master 故障转移至其他 slave, 导致当前 slave 收到信息的 GTID 发生变化)\n"),a("ul",[a("li",[t._v("latest (default): 即当 debezium 再次连接时(若切换 master 之间暂停或断开)从最新位置开始同步数据")]),t._v(" "),a("li",[t._v("earliest: 读取"),a("code",[t._v("新")]),t._v(" GTID 且未被清理的所有数据")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("示例如下")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('{\n    "connector.class": "io.debezium.connector.mysql.MySqlConnector",\n    "snapshot.locking.mode": "none",\n    "database.user": "debezium",\n    "database.server.id": "222333221",\n    "tasks.max": "1",\n    "database.history.kafka.bootstrap.servers": "192.168.4.22:9092",\n    "database.history.kafka.topic": "history_inventory_1",\n    "database.server.name": "mysql_inventory_1",\n    "database.port": "3306",\n    "table.whitelist": "inventory.orders",\n    "decimal.handling.mode": "string",\n    "database.hostname": "192.168.4.23",\n    "database.password": "dbz",\n    "name": "mysql_inventory_1",\n    "database.history.store.only.monitored.tables.ddl": "true",\n    "database.whitelist": "inventory",\n    "snapshot.mode": "schema_only"\n}\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("h2",{attrs:{id:"_3-启动流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-启动流程"}},[t._v("#")]),t._v(" 3. 启动流程")]),t._v(" "),a("ul",[a("li",[t._v("snapshot\n"),a("ul",[a("li",[t._v("功能:\n"),a("ul",[a("li",[a("ol",[a("li",[t._v("设置 session 下 REPEATABLE READ 隔离级别 和全局锁 (aws 全局锁失败，针对白名单，加表级读锁)")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("snapshot.locking.mode: none")]),t._v(" 跳过加锁")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("start transaction with consistent snapshot 快照读事务: 显示开启快照, 而不是像一般情况下, 第一次 select 开启快照读")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("binglog 文件名和 position、gtid 等获取")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("实例下数据库列表获取")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"5"}},[a("li",[t._v("每个库的表列表获取")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"6"}},[a("li",[t._v("connect 配置白名单数据库的 drop create 语句导入 kafka 特定 topic")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"7"}},[a("li",[t._v("全局锁时解锁")])]),t._v(" "),a("ul",[a("li",[t._v("unlock tables 在针对全局，不会隐式提交")]),t._v(" "),a("li",[t._v("针对 lock table 时，会触发隐式提交")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"8"}},[a("li",[t._v("对每个表进行扫描，并对每行数据生成 create 事件，导入 kafka")])]),t._v(" "),a("ul",[a("li",[t._v("可通过 "),a("code",[t._v("snapshot.mode: schema_only")]),t._v(" 来跳过此步骤")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"9"}},[a("li",[t._v("commit")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"10"}},[a("li",[t._v("再次解锁(主要针对表级锁)")])])])])]),t._v(" "),a("li",[t._v("注意:\n"),a("ul",[a("li",[a("ol",[a("li",[t._v("默认情况下全局锁, 当无法获得全局锁(比如 aws rds)时, 会对每个表分别加表级读锁。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("但是表级锁的 unlock 命令会做隐式事务提交，导致 步骤 8 和 上面步骤不在同一事务中。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("那么此时的步骤 8 就脱离了快照读的范围，此时如果有数据插入:")])]),t._v(" "),a("ul",[a("li",[t._v("一方面会被步骤 8 数据扫描, 创建 create 事件进入 kafka;")]),t._v(" "),a("li",[t._v("另一方面，会在步骤 3 获取的 binlog 位置后面插入 create 记录, 然后等到 connector 快照模式完成 进入 binglog 同步模式，就会生成 Create 事件，导致重复。（或者删除操作，binlog 删除时，指向了一个不存在的 id 等）")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v("所以表级锁的解锁放在事务提交后，这样如果数据库很大，就有的等了")])])])])])])])]),t._v(" "),a("h2",{attrs:{id:"_4-添加-table-whitelist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-添加-table-whitelist"}},[t._v("#")]),t._v(" 4. 添加 table.whitelist")]),t._v(" "),a("ul",[a("li",[t._v("旧方法:\n"),a("ul",[a("li",[a("ol",[a("li",[t._v("add table")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("pasue connector")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[t._v("delete history topic")])]),t._v(" "),a("ul",[a("li",[t._v("3.1 如果此流程不起作用, 可以重来一遍，然后在此位置，手动在 topic offsets 下, 此 connector 对应的 topic 分区下，手动添加 offset 信息, 将 table.whitelist 和 table.blacklist 自定义")]),t._v(" "),a("li",[a("code",[t._v("缺点")]),t._v(":\n"),a("ul",[a("li",[a("ol",[a("li",[t._v("可能会"),a("code",[t._v("数据重复")]),t._v("， 新的 offset 信息， pos 没有变化，重启后，再从 此 pos 位置读取数据，此位置后，已经存储的数据，就会出现重复。")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[t._v("如果手动插入的此条 offset pos/gtid 信息过旧，那么新表会把此 offset pos/gtid 后的所有符合表白名单的数据，同步到 kafka；"),a("code",[t._v("如果数据非常多")]),t._v("，"),a("code",[t._v("比较耗时")]),t._v("；毕竟单 connector 单 task 处理数据，每秒 3300 条所有")])])])])])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"4"}},[a("li",[t._v('update config ("snapshot.mode": "schema_only_recovery")')])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"5"}},[a("li",[t._v("restart connector\\task")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"6"}},[a("li",[t._v("write data to new table")])])]),t._v(" "),a("li",[a("ol",{attrs:{start:"7"}},[a("li",[t._v("恢复 snapshot.mode")])])])])]),t._v(" "),a("li",[t._v("新方法:\n"),a("ul",[a("li",[t._v("功能仍在测试中 0.9.0 版本添加")]),t._v(" "),a("li",[t._v('connector config 中加入 "snapshot.new.tables": "parallel", (off 为关闭 whitelist 实时变更)')]),t._v(" "),a("li",[t._v("然后通过 restful api 依次重启 connector、task")])])]),t._v(" "),a("li",[t._v("重点:\n"),a("ul",[a("li",[t._v("新方法貌似不太好用, 一顿乱七八糟操作后就废了。但是把 connect 容器全部重建之后可用(重启无用), 比较诡异")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("更多信息, 比如 topic 内数据格式, 更多的数据格式兼容问题, 请查看参考文章")])]),t._v(" "),a("p",[t._v("参考: "),a("br")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://debezium.io/documentation/reference/1.1/connectors/mysql.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("debezium mysql"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);l.default=e.exports}}]);