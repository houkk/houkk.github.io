(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{358:function(s,a,t){"use strict";t.r(a);var n=t(25),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),t("p",[s._v("介绍采用 docker 形式的部署参数配置、注意事项")])]),s._v(" "),t("h2",{attrs:{id:"_1-docker-参数介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-docker-参数介绍"}},[s._v("#")]),s._v(" 1. docker 参数介绍")]),s._v(" "),t("ul",[t("li",[t("p",[t("code",[s._v("BOOTSTRAP_SERVERS")]),s._v(": kafka:port,kafka2:port")]),s._v(" "),t("ul",[t("li",[s._v("kafka broker 地址列表")])])]),s._v(" "),t("li",[t("p",[t("code",[s._v("GROUP_ID")]),s._v(":")]),s._v(" "),t("ul",[t("li",[s._v("分布运行模式下, 供服务间互相发现")])])]),s._v(" "),t("li",[t("p",[t("code",[s._v("CONFIG_STORAGE_TOPIC")]),s._v(": string")]),s._v(" "),t("ul",[t("li",[s._v("topic 特点\n"),t("ul",[t("li",[s._v("单分区多副本")]),s._v(" "),t("li",[s._v("clean policy: compact (default)")])])]),s._v(" "),t("li",[s._v("描述: connector、task 配置存储\n"),t("ul",[t("li",[s._v("当配置变更时新增数据")])])]),s._v(" "),t("li",[s._v("辅助参数:\n"),t("ul",[t("li",[s._v("CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 副本因子 (config.storage.replication.factor)")])])])])]),s._v(" "),t("li",[t("p",[t("code",[s._v("OFFSET_STORAGE_TOPIC")]),s._v(": string")]),s._v(" "),t("ul",[t("li",[s._v("topic 特点\n"),t("ul",[t("li",[s._v("多分区多副本 (默认 25 partition, 最小 3 副本)")]),s._v(" "),t("li",[s._v("但是"),t("code",[s._v("当分区数发生变化时, 会出现 bug")]),s._v(", connetor 配置之前完成分区配置 (bug 修复前不再更改分区数)")]),s._v(" "),t("li",[s._v("clean policy: compact")])])]),s._v(" "),t("li",[s._v("描述: 每个 connector 的偏移量存储")]),s._v(" "),t("li",[s._v("辅助参数:\n"),t("ul",[t("li",[s._v("CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 副本因子 (offset.storage.replication.factor)")]),s._v(" "),t("li",[s._v("OFFSET_FLUSH_INTERVAL_MS: Int (offset 刷新间隔)")])])])])]),s._v(" "),t("li",[t("p",[t("code",[s._v("STATUS_STORAGE_TOPIC")]),s._v(": string")]),s._v(" "),t("ul",[t("li",[s._v("topic 特点\n"),t("ul",[t("li",[s._v("多分区多副本 (未测试分区增加后的情况, 是不是和上面 offset 有同样问题)")]),s._v(" "),t("li",[s._v("clean policy: compact")])])]),s._v(" "),t("li",[s._v("描述: connector、task 状态存储")]),s._v(" "),t("li",[s._v("辅助参数:\n"),t("ul",[t("li",[s._v("CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 副本因子 (status.storage.replication.factor)")])])])])]),s._v(" "),t("li",[t("p",[s._v("CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=false")]),s._v(" "),t("ul",[t("li",[s._v("converter 为 json 时关闭 schema")]),s._v(" "),t("li",[s._v("决定表的 topic 数据, key 是否包含表结构信息")])])]),s._v(" "),t("li",[t("p",[s._v("CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false")]),s._v(" "),t("ul",[t("li",[s._v("converter 为 json 时关闭 schema")]),s._v(" "),t("li",[s._v("决定表的 topic 数据, value 是否包含表结构信息")])])]),s._v(" "),t("li",[t("p",[s._v("CONNECT_PRODUCER_MAX_REQUEST_SIZE=20971520 (字节)")]),s._v(" "),t("ul",[t("li",[s._v("作为 producer 时, 发送数据大小限制. default: 1M")]),s._v(" "),t("li",[s._v("需要配合 kafka MESSAGE_MAX_BYTES 字段, kafka 接收数据大小限制")])])]),s._v(" "),t("li",[t("p",[s._v("CONNECT_DATABASE_HISTORY_KAFKA_RECOVERY_POLL_INTERVAL_MS=1000 （ms）")]),s._v(" "),t("ul",[t("li",[s._v("恢复超时配置")]),s._v(" "),t("li",[s._v("history topic 保存 schema, connector 重启时, 需要拉取 schema 信息, 以便对数据进行特殊数据类型处理.")]),s._v(" "),t("li",[s._v("default: 100ms 忘了")])])]),s._v(" "),t("li",[t("p",[s._v("HEAP_OPTS=-XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 # 需要配合 docker 内存限制使用")]),s._v(" "),t("ul",[t("li",[s._v("HEAP_OPTS=-Xmx512M -Xms256M")]),s._v(" "),t("li",[s._v("java 内存限制")])])])]),s._v(" "),t("h2",{attrs:{id:"_3-运行模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-运行模式"}},[s._v("#")]),s._v(" 3. 运行模式")]),s._v(" "),t("ul",[t("li",[s._v("单机模式\n"),t("ul",[t("li",[s._v("字面意思")])])]),s._v(" "),t("li",[s._v("集群模式\n"),t("ul",[t("li",[s._v("参数配置: GROUP_ID (唯一字符串, 用来 connect 服务之间互相发现)")]),s._v(" "),t("li",[s._v("简单介绍: 当 connect 服务宕机后, 可以保证 connector 任务在其他同集群下 connect 服务中创建并运行\n"),t("ul",[t("li",[s._v("集群多 debezium 自己完成 leader 选举")])])])])])]),s._v(" "),t("h2",{attrs:{id:"_4-rest-api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-rest-api"}},[s._v("#")]),s._v(" 4. Rest api")]),s._v(" "),t("blockquote",[t("p",[s._v("http://kafka.apache.org/documentation.html#connect")])]),s._v(" "),t("ul",[t("li",[s._v("GET /connectors – 返回所有正在运行的 connector 名")]),s._v(" "),t("li",[s._v("POST /connectors – 新建一个 connector;请求体必须是 json 格式并且需要包含 name 字段和 config 字段，name 是 connector 的名字，config 是 json 格式，必须包含你的 connector 的配置信息。")]),s._v(" "),t("li",[s._v("GET /connectors/{name} – 获取指定 connetor 的信息")]),s._v(" "),t("li",[s._v("GET /connectors/{name}/config – 获取指定 connector 的配置信息")]),s._v(" "),t("li",[s._v("PUT /connectors/{name}/config – 更新指定 connector 的配置信息 (完整的 config json)")]),s._v(" "),t("li",[s._v("GET /connectors/{name}/status – 获取指定 connector 的状态，包括它是否在运行、停止、或者失败，如果发生错误，还会列出错误的具体信息。")]),s._v(" "),t("li",[s._v("GET /connectors/{name}/tasks – 获取指定 connector 正在运行的 task。")]),s._v(" "),t("li",[s._v("GET /connectors/{name}/tasks/{taskid}/status – 获取指定 connector 的 task 的状态信息")]),s._v(" "),t("li",[s._v("PUT /connectors/{name}/pause – 暂停 connector 和它的 task，停止数据处理知道它被恢复。")]),s._v(" "),t("li",[s._v("PUT /connectors/{name}/resume – 恢复一个被暂停的 connector")]),s._v(" "),t("li",[s._v("POST /connectors/{name}/restart – 重启一个 connector，尤其是在一个 connector 运行失败的情况下比较常用")]),s._v(" "),t("li",[s._v("POST /connectors/{name}/tasks/{taskId}/restart – 重启一个 task，一般是因为它运行失败才这样做。")]),s._v(" "),t("li",[s._v("DELETE /connectors/{name} – 删除一个 connector，停止它的所有 task 并删除配置")]),s._v(" "),t("li",[s._v("PUT /connector-plugins/{connector name: string}/config/validate\n"),t("ul",[t("li",[s._v("req: config 内容")])])])]),s._v(" "),t("h2",{attrs:{id:"_5-容器内配置文件以及-debezium-镜像定制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-容器内配置文件以及-debezium-镜像定制"}},[s._v("#")]),s._v(" 5. 容器内配置文件以及 debezium 镜像定制")]),s._v(" "),t("h3",{attrs:{id:"_5-1-背景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-背景"}},[s._v("#")]),s._v(" 5.1 背景")]),s._v(" "),t("div",{staticClass:"custom-block danger"},[t("p",{staticClass:"custom-block-title"},[s._v("WARNING")]),s._v(" "),t("p",[s._v("通过步骤四 debezium 提供的 restful api 在创建 CDC 监控任务时，数据库信息被显示的书写，容易造成数据库信息泄露，非常危险")])]),s._v(" "),t("p",[s._v("暴露场景如下\n具体场景如下: "),t("br")]),s._v(" "),t("ol",[t("li",[s._v("创建监控 connector (connector 是监控任务的最大单元)")])]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("Post /connectors\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    name: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(",\n    config: "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        database.hostname: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(",\n        database.user: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(",\n        database.password: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(",\n        database.whitelist: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'dbname'")]),s._v(",\n        talbe.whitelist: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'dbname.tableA,dbname.tabelB'")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("ol",{attrs:{start:"2"}},[t("li",[s._v("查看 connector 配置信息")])]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("GET /connectors/name/config\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    database.hostname: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(",\n    database.user: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(",\n    database.password: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(",\n    database.whitelist: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'dbname'")]),s._v(",\n    talbe.whitelist: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'dbname.tableA,dbname.tabelB'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("ol",{attrs:{start:"3"}},[t("li",[s._v("更新 connector 配置信息（需要全量信息，即也需要数据库信息）")])]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("Put /connectors/name/config\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    database.hostname: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(",\n    database.user: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(",\n    database.password: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(",\n    database.whitelist: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'dbname'")]),s._v(",\n    talbe.whitelist: "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'dbname.tableA,dbname.tabelB'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("blockquote",[t("p",[s._v("简而言之, rest api 能够直接拿到线上的数据库配置信息")])]),s._v(" "),t("h3",{attrs:{id:"_5-2-光放解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-光放解决方案"}},[s._v("#")]),s._v(" 5.2 光放解决方案")]),s._v(" "),t("p",[s._v("debezium 提供了"),t("a",{attrs:{href:"https://debezium.io/blog/2019/12/13/externalized-secrets/",target:"_blank",rel:"noopener noreferrer"}},[s._v("数据库连接信息私密化"),t("OutboundLink")],1),s._v("的功能")]),s._v(" "),t("h4",{attrs:{id:"_5-2-1-docker-容器配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-1-docker-容器配置"}},[s._v("#")]),s._v(" 5.2.1 docker 容器配置")]),s._v(" "),t("blockquote",[t("p",[s._v("增加环境变量")])]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CONNECT_CONFIG_PROVIDERS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" file\n"),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CONNECT_CONFIG_PROVIDERS_FILE_CLASS")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("\n  org"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("apache"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("kafka"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("common"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("config"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("provider"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("FileConfigProvider\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("h4",{attrs:{id:"_5-2-2-api-变更"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-2-api-变更"}},[s._v("#")]),s._v(" 5.2.2 Api 变更")]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("${file:/kafka/dbconfig/config_name:config_key}")]),s._v(" 形式, 来代替数据库信息, 如下所示:")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("Post "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("connectors\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    config"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"database.hostname"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${file:/kafka/dbconfig/mysql_server_01.conf:MYSQL_SERVER_ADDRESS}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"database.user"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${file:/kafka/dbconfig/mysql_server_01.conf:MYSQL_SERVER_USERNAME}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"database.password"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${file:/kafka/dbconfig/mysql_server_01.conf:MYSQL_SERVER_PASSWORD}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"database.whitelist"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${file:/kafka/dbconfig/mysql_server_01.conf:MATERIAL_DATABASE_NAME}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"table.whitelist"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"${file:/kafka/dbconfig/mysql_server_01.conf:MATERIAL_DATABASE_NAME}.shop"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("blockquote",[t("p",[t("code",[s._v("file:/kafka/dbconfig/mysql_server_01.conf")]),s._v(" 即为配置文件在 docker 容器中的绝对路径\nmysql_server_01.conf")])]),s._v(" "),t("div",{staticClass:"language-yaml line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-yaml"}},[t("code",[s._v("MYSQL_SERVER_ADDRESS=aaa\nMYSQL_SERVER_USERNAME=bbb\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("注意: 不要有任何其他符号, 比如引号")])]),s._v(" "),t("p",[s._v("这样无论在 get 请求 还是 kafka 信息中, hostname\\user\\password, 都是如上形式进行展示 "),t("br"),s._v("\ndbname 会在 kafka topic 的 offset topic 中暴露，不过没什么啥影响")]),s._v(" "),t("h3",{attrs:{id:"_5-3-解决方案实施"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-解决方案实施"}},[s._v("#")]),s._v(" 5.3 解决方案实施")]),s._v(" "),t("p",[s._v("由于该方案，只支持读取容器内配置文件的方式来获取信息，所以我们的主要工作就是把数据库配置文件，放入容器中，重新制作镜像。"),t("br")]),s._v(" "),t("ul",[t("li",[s._v("方案一: 制作镜像时, 把文件放到指定位置即可")]),s._v(" "),t("li",[s._v("方案二: 更稳灵活, 在原有基础上, 添加新的 debezium 启动脚本，\n"),t("ul",[t("li",[s._v("启动之前，去拉取配置文件服务器下载对应配置文件到置顶位置")]),s._v(" "),t("li",[s._v("正常启动服务")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/houkk/debezium_docker",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),t("OutboundLink")],1)])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);